
package ws.client.partner;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PartnerWebService", targetNamespace = "http://ws.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PartnerWebService {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns ws.client.partner.PartnerEntity
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "partnerLogin", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.PartnerLogin")
    @ResponseWrapper(localName = "partnerLoginResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.PartnerLoginResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/partnerLoginRequest", output = "http://ws.ejb/PartnerWebService/partnerLoginResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.ejb/PartnerWebService/partnerLogin/Fault/InvalidLoginCredentialException")
    })
    public PartnerEntity partnerLogin(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<ws.client.partner.PartnerReservationEntity>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAllReservations", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveAllReservations")
    @ResponseWrapper(localName = "retrieveAllReservationsResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveAllReservationsResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/retrieveAllReservationsRequest", output = "http://ws.ejb/PartnerWebService/retrieveAllReservationsResponse")
    public List<PartnerReservationEntity> retrieveAllReservations(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns ws.client.partner.PartnerReservationEntity
     * @throws ReservationNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveReservationById", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveReservationById")
    @ResponseWrapper(localName = "retrieveReservationByIdResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveReservationByIdResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/retrieveReservationByIdRequest", output = "http://ws.ejb/PartnerWebService/retrieveReservationByIdResponse", fault = {
        @FaultAction(className = ReservationNotFoundException_Exception.class, value = "http://ws.ejb/PartnerWebService/retrieveReservationById/Fault/ReservationNotFoundException")
    })
    public PartnerReservationEntity retrieveReservationById(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0)
        throws ReservationNotFoundException_Exception
    ;

}
