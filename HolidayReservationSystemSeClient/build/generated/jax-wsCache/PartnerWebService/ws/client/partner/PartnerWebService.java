
package ws.client.partner;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PartnerWebService", targetNamespace = "http://ws.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PartnerWebService {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns ws.client.partner.PartnerEntity
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "partnerLogin", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.PartnerLogin")
    @ResponseWrapper(localName = "partnerLoginResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.PartnerLoginResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/partnerLoginRequest", output = "http://ws.ejb/PartnerWebService/partnerLoginResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.ejb/PartnerWebService/partnerLogin/Fault/InvalidLoginCredentialException")
    })
    public PartnerEntity partnerLogin(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @return
     *     returns ws.client.partner.ReservationEntity
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkOut", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.CheckOut")
    @ResponseWrapper(localName = "checkOutResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.CheckOutResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/checkOutRequest", output = "http://ws.ejb/PartnerWebService/checkOutResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://ws.ejb/PartnerWebService/checkOut/Fault/Exception")
    })
    public ReservationEntity checkOut(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        String arg6,
        @WebParam(name = "arg7", targetNamespace = "")
        String arg7)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.Boolean
     * @throws Exception_Exception
     * @throws RoomTypeNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "reserveRoom", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.ReserveRoom")
    @ResponseWrapper(localName = "reserveRoomResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.ReserveRoomResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/reserveRoomRequest", output = "http://ws.ejb/PartnerWebService/reserveRoomResponse", fault = {
        @FaultAction(className = RoomTypeNotFoundException_Exception.class, value = "http://ws.ejb/PartnerWebService/reserveRoom/Fault/RoomTypeNotFoundException"),
        @FaultAction(className = Exception_Exception.class, value = "http://ws.ejb/PartnerWebService/reserveRoom/Fault/Exception")
    })
    public Boolean reserveRoom(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        Integer arg3)
        throws Exception_Exception, RoomTypeNotFoundException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<ws.client.partner.PartnerReservationEntity>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAllReservations", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveAllReservations")
    @ResponseWrapper(localName = "retrieveAllReservationsResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveAllReservationsResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/retrieveAllReservationsRequest", output = "http://ws.ejb/PartnerWebService/retrieveAllReservationsResponse")
    public List<PartnerReservationEntity> retrieveAllReservations(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns ws.client.partner.PartnerReservationEntity
     * @throws ReservationNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveReservationById", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveReservationById")
    @ResponseWrapper(localName = "retrieveReservationByIdResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveReservationByIdResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/retrieveReservationByIdRequest", output = "http://ws.ejb/PartnerWebService/retrieveReservationByIdResponse", fault = {
        @FaultAction(className = ReservationNotFoundException_Exception.class, value = "http://ws.ejb/PartnerWebService/retrieveReservationById/Fault/ReservationNotFoundException")
    })
    public PartnerReservationEntity retrieveReservationById(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0)
        throws ReservationNotFoundException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<ws.client.partner.RoomTypeEntity>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchAvailableRoom", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.SearchAvailableRoom")
    @ResponseWrapper(localName = "searchAvailableRoomResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.SearchAvailableRoomResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/searchAvailableRoomRequest", output = "http://ws.ejb/PartnerWebService/searchAvailableRoomResponse")
    public List<RoomTypeEntity> searchAvailableRoom(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        Integer arg2);

    /**
     * 
     * @param arg0
     * @return
     *     returns ws.client.partner.RoomTypeEntity
     * @throws RoomTypeNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveRoomTypeByName", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveRoomTypeByName")
    @ResponseWrapper(localName = "retrieveRoomTypeByNameResponse", targetNamespace = "http://ws.ejb/", className = "ws.client.partner.RetrieveRoomTypeByNameResponse")
    @Action(input = "http://ws.ejb/PartnerWebService/retrieveRoomTypeByNameRequest", output = "http://ws.ejb/PartnerWebService/retrieveRoomTypeByNameResponse", fault = {
        @FaultAction(className = RoomTypeNotFoundException_Exception.class, value = "http://ws.ejb/PartnerWebService/retrieveRoomTypeByName/Fault/RoomTypeNotFoundException")
    })
    public RoomTypeEntity retrieveRoomTypeByName(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws RoomTypeNotFoundException_Exception
    ;

}
